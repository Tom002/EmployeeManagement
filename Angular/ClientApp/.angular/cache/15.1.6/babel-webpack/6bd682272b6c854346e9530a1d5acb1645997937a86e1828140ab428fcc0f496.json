{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/api/app.generated\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/material/table\";\nfunction DepartmentListComponent_th_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 8);\n    i0.ɵɵtext(1, \"Name\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DepartmentListComponent_td_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const department_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(department_r6.name);\n  }\n}\nfunction DepartmentListComponent_th_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 8);\n    i0.ɵɵtext(1, \"Name\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DepartmentListComponent_td_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const department_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(department_r7.abbreviation);\n  }\n}\nfunction DepartmentListComponent_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 10);\n  }\n}\nfunction DepartmentListComponent_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 11);\n  }\n}\nexport class DepartmentListComponent {\n  constructor(departmentClient, dialog) {\n    this.departmentClient = departmentClient;\n    this.dialog = dialog;\n    this.departments = [];\n    this.columnsToDisplay = ['name', 'abbreviation'];\n  }\n  ngOnInit() {\n    this.loadData();\n  }\n  loadData() {\n    this.departmentClient.departmentAll().subscribe(data => {\n      this.departments = data;\n    });\n  }\n  addNew() {\n    const dialogRef = this.dialog.open(AddDialogComponent, {\n      data: {\n        issue: Issue\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result === 1) {\n        // After dialog is closed we're doing frontend updates\n        // For add we're just pushing a new row inside DataService\n        this.exampleDatabase.dataChange.value.push(this.dataService.getDialogData());\n        this.refreshTable();\n      }\n    });\n  }\n}\nDepartmentListComponent.ɵfac = function DepartmentListComponent_Factory(t) {\n  return new (t || DepartmentListComponent)(i0.ɵɵdirectiveInject(i1.DepartmentClient), i0.ɵɵdirectiveInject(i2.MatDialog));\n};\nDepartmentListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DepartmentListComponent,\n  selectors: [[\"app-department-list\"]],\n  decls: 12,\n  vars: 3,\n  consts: [[1, \"mat-typography\"], [\"mat-table\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"abbreviation\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function DepartmentListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Department list\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"table\", 1);\n      i0.ɵɵelementContainerStart(4, 2);\n      i0.ɵɵtemplate(5, DepartmentListComponent_th_5_Template, 2, 0, \"th\", 3);\n      i0.ɵɵtemplate(6, DepartmentListComponent_td_6_Template, 2, 1, \"td\", 4);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(7, 5);\n      i0.ɵɵtemplate(8, DepartmentListComponent_th_8_Template, 2, 0, \"th\", 3);\n      i0.ɵɵtemplate(9, DepartmentListComponent_td_9_Template, 2, 1, \"td\", 4);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(10, DepartmentListComponent_tr_10_Template, 1, 0, \"tr\", 6);\n      i0.ɵɵtemplate(11, DepartmentListComponent_tr_11_Template, 1, 0, \"tr\", 7);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"dataSource\", ctx.departments);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.columnsToDisplay);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.columnsToDisplay);\n    }\n  },\n  dependencies: [i3.MatTable, i3.MatHeaderCellDef, i3.MatHeaderRowDef, i3.MatColumnDef, i3.MatCellDef, i3.MatRowDef, i3.MatHeaderCell, i3.MatCell, i3.MatHeaderRow, i3.MatRow],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;IAMIA,6BAAsC;IAAAA,oBAAI;IAAAA,iBAAK;;;;;IAC/CA,6BAA0C;IAAAA,YAAqB;IAAAA,iBAAK;;;;IAA1BA,eAAqB;IAArBA,wCAAqB;;;;;IAG/DA,6BAAsC;IAAAA,oBAAI;IAAAA,iBAAK;;;;;IAC/CA,6BAA0C;IAAAA,YAA6B;IAAAA,iBAAK;;;;IAAlCA,eAA6B;IAA7BA,gDAA6B;;;;;IAGzEA,yBAA4D;;;;;IAC5DA,yBAAuE;;;ACHzE,OAAM,MAAOC,uBAAuB;EAKlCC,YACmBC,gBAAkC,EAClCC,MAAiB;IADjB,qBAAgB,GAAhBD,gBAAgB;IAChB,WAAM,GAANC,MAAM;IANzB,gBAAW,GAAoB,EAAE;IAEjC,qBAAgB,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC;EAKxC;EACHC,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQ;IACN,IAAI,CAACH,gBAAgB,CAACI,aAAa,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAI;MACvD,IAAI,CAACC,WAAW,GAAGD,IAAI;IACzB,CAAC,CAAC;EACJ;EAEAE,MAAM;IACJ,MAAMC,SAAS,GAAG,IAAI,CAACR,MAAM,CAACS,IAAI,CAACC,kBAAkB,EAAE;MACrDL,IAAI,EAAE;QAAEM,KAAK,EAAEC;MAAK;KACrB,CAAC;IAEFJ,SAAS,CAACK,WAAW,EAAE,CAACT,SAAS,CAAEU,MAAM,IAAI;MAC3C,IAAIA,MAAM,KAAK,CAAC,EAAE;QAChB;QACA;QACA,IAAI,CAACC,eAAe,CAACC,UAAU,CAACC,KAAK,CAACC,IAAI,CACxC,IAAI,CAACC,WAAW,CAACC,aAAa,EAAE,CACjC;QACD,IAAI,CAACC,YAAY,EAAE;;IAEvB,CAAC,CAAC;EACJ;;AAlCWxB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAAyB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDZpC9B,8BAA4B;MACtBA,+BAAe;MAAAA,iBAAK;MAG1BA,gCAA4C;MAC1CA,gCAAkC;MAChCA,sEAA+C;MAC/CA,sEAAoE;MACtEA,0BAAe;MACfA,gCAA0C;MACxCA,sEAA+C;MAC/CA,sEAA4E;MAC9EA,0BAAe;MAEfA,wEAA4D;MAC5DA,wEAAuE;MACzEA,iBAAQ;;;MAZSA,eAA0B;MAA1BA,4CAA0B;MAUrBA,eAAiC;MAAjCA,sDAAiC;MACdA,eAAyB;MAAzBA,uDAAyB","names":["i0","DepartmentListComponent","constructor","departmentClient","dialog","ngOnInit","loadData","departmentAll","subscribe","data","departments","addNew","dialogRef","open","AddDialogComponent","issue","Issue","afterClosed","result","exampleDatabase","dataChange","value","push","dataService","getDialogData","refreshTable","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\princz\\source\\repos\\Angular\\Angular\\ClientApp\\src\\app\\modules\\department\\department-list\\department-list.component.html","C:\\Users\\princz\\source\\repos\\Angular\\Angular\\ClientApp\\src\\app\\modules\\department\\department-list\\department-list.component.ts"],"sourcesContent":["<div class=\"mat-typography\">\n  <h1>Department list</h1>\n</div>\n\n<table mat-table [dataSource]=\"departments\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef>Name</th>\n    <td mat-cell *matCellDef=\"let department\">{{ department.name }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"abbreviation\">\n    <th mat-header-cell *matHeaderCellDef>Name</th>\n    <td mat-cell *matCellDef=\"let department\">{{ department.abbreviation }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let myRowData; columns: columnsToDisplay\"></tr>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  DepartmentClient,\n  DepartmentDto,\n} from 'src/app/core/api/app.generated';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-department-list',\n  templateUrl: './department-list.component.html',\n  styleUrls: ['./department-list.component.css'],\n})\nexport class DepartmentListComponent implements OnInit {\n  departments: DepartmentDto[] = [];\n\n  columnsToDisplay = ['name', 'abbreviation'];\n\n  constructor(\n    private readonly departmentClient: DepartmentClient,\n    private readonly dialog: MatDialog\n  ) {}\n  ngOnInit(): void {\n    this.loadData();\n  }\n\n  loadData(): void {\n    this.departmentClient.departmentAll().subscribe((data) => {\n      this.departments = data;\n    });\n  }\n\n  addNew() {\n    const dialogRef = this.dialog.open(AddDialogComponent, {\n      data: { issue: Issue },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === 1) {\n        // After dialog is closed we're doing frontend updates\n        // For add we're just pushing a new row inside DataService\n        this.exampleDatabase.dataChange.value.push(\n          this.dataService.getDialogData()\n        );\n        this.refreshTable();\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}