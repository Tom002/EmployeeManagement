{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/api/app.generated\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/shared/services/auth.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/card\";\nfunction LoginPageComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Username is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginPageComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginPageComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Invalid credentials \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return {\n    \"min-width\": \"500px\",\n    \"align-items\": \"center\"\n  };\n};\nexport class LoginPageComponent {\n  constructor(loginClient, fb, auth, router) {\n    this.loginClient = loginClient;\n    this.fb = fb;\n    this.auth = auth;\n    this.router = router;\n    this.loginValid = true;\n    this.errorHandling = (control, error) => {\n      return this.loginForm.controls[control].hasError(error);\n    };\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required, Validators.maxLength(100)]],\n      password: ['', [Validators.required, Validators.minLength(8)]]\n    });\n  }\n  submit() {\n    if (this.loginForm.valid) {\n      this.loginClient.login({\n        username: this.loginForm.controls['username'].value,\n        password: this.loginForm.controls['password'].value\n      }).subscribe(result => {\n        this.loginValid = true;\n        this.auth.setUser(result);\n        this.router.navigate(['employees']);\n      }, error => {\n        console.log(error);\n        this.loginValid = false;\n      });\n    }\n  }\n}\nLoginPageComponent.ɵfac = function LoginPageComponent_Factory(t) {\n  return new (t || LoginPageComponent)(i0.ɵɵdirectiveInject(i1.LoginClient), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.Router));\n};\nLoginPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginPageComponent,\n  selectors: [[\"app-login-page\"]],\n  decls: 22,\n  vars: 7,\n  consts: [[1, \"login-form-flex\"], [1, \"pt-1\", \"pb-3\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"placeholder\", \"Username\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [1, \"button-flex-container\"], [\"color\", \"primary\", \"mat-raised-button\", \"\"]],\n  template: function LoginPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\")(2, \"mat-card-title\", 1);\n      i0.ɵɵtext(3, \"Enter your username and password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"mat-card-content\")(5, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginPageComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(6, \"p\")(7, \"mat-form-field\", 3)(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵtemplate(11, LoginPageComponent_mat_error_11_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"p\")(13, \"mat-form-field\", 3)(14, \"mat-label\");\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 6);\n      i0.ɵɵtemplate(17, LoginPageComponent_mat_error_17_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(18, LoginPageComponent_mat_error_18_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementStart(19, \"div\", 7)(20, \"button\", 8);\n      i0.ɵɵtext(21, \"Submit\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c0));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"username\", \"required\"));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorHandling(\"password\", \"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.loginValid);\n    }\n  },\n  dependencies: [i5.NgIf, i6.MatButton, i7.MatInput, i8.MatFormField, i8.MatLabel, i8.MatError, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i9.MatCard, i9.MatCardContent, i9.MatCardTitle],\n  styles: [\".login-form-flex[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  height: 100%;\\r\\n\\r\\n  mat-card {\\r\\n    min-width: 500px;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n  mat-card-title {\\r\\n    text-align: center;\\r\\n    padding-top: 10px;\\r\\n    padding-bottom: 15px;\\r\\n    font-size: 24px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.button-flex-container[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  width: 100%;\\r\\n  justify-content: center;\\r\\n\\r\\n  button {\\r\\n    height: 50px;\\r\\n    width: 200px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.error[_ngcontent-%COMP%] {\\r\\n  height: 50px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9kdWxlcy9sb2dpbi9sb2dpbi1wYWdlL2xvZ2luLXBhZ2UuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFlBQVk7O0VBRVo7SUFDRSxnQkFBZ0I7SUFDaEIsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0Usa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsZUFBZTtFQUNqQjtBQUNGOztBQUVBO0VBQ0UsYUFBYTtFQUNiLFdBQVc7RUFDWCx1QkFBdUI7O0VBRXZCO0lBQ0UsWUFBWTtJQUNaLFlBQVk7RUFDZDtBQUNGOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ2luLWZvcm0tZmxleCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGhlaWdodDogMTAwJTtcclxuXHJcbiAgbWF0LWNhcmQge1xyXG4gICAgbWluLXdpZHRoOiA1MDBweDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICBtYXQtY2FyZC10aXRsZSB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxNXB4O1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gIH1cclxufVxyXG5cclxuLmJ1dHRvbi1mbGV4LWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICB3aWR0aDogMTAwJTtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuXHJcbiAgYnV0dG9uIHtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIHdpZHRoOiAyMDBweDtcclxuICB9XHJcbn1cclxuXHJcbi5lcnJvciB7XHJcbiAgaGVpZ2h0OiA1MHB4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;;ICWvDC,iCAAyD;IACvDA,sCACF;IAAAA,iBAAY;;;;;IAaZA,iCAAyD;IACvDA,sCACF;IAAAA,iBAAY;;;;;IAIhBA,iCAA+B;IAACA,qCAAoB;IAAAA,iBAAY;;;;;;;;;ADtBxE,OAAM,MAAOC,kBAAkB;EAI7BC,YACmBC,WAAwB,EACxBC,EAAe,EACfC,IAAiB,EACjBC,MAAc;IAHd,gBAAW,GAAXH,WAAW;IACX,OAAE,GAAFC,EAAE;IACF,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;IANzB,eAAU,GAAY,IAAI;IAmCnB,kBAAa,GAAG,CAACC,OAAe,EAAEC,KAAa,KAAI;MACxD,OAAO,IAAI,CAACC,SAAS,CAACC,QAAQ,CAACH,OAAO,CAAC,CAACI,QAAQ,CAACH,KAAK,CAAC;IACzD,CAAC;IA7BC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,EAAE,CAACQ,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MAChEC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACkB,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEAC,MAAM;IACJ,IAAI,IAAI,CAACT,SAAS,CAACU,KAAK,EAAE;MACxB,IAAI,CAAChB,WAAW,CACbiB,KAAK,CAAC;QACLP,QAAQ,EAAE,IAAI,CAACJ,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACW,KAAK;QACnDL,QAAQ,EAAE,IAAI,CAACP,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACW;OAC/C,CAAC,CACDC,SAAS,CACPC,MAAM,IAAI;QACT,IAAI,CAACC,UAAU,GAAG,IAAI;QACtB,IAAI,CAACnB,IAAI,CAACoB,OAAO,CAACF,MAAM,CAAC;QACzB,IAAI,CAACjB,MAAM,CAACoB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;MACrC,CAAC,EACAlB,KAAK,IAAI;QACRmB,OAAO,CAACC,GAAG,CAACpB,KAAK,CAAC;QAClB,IAAI,CAACgB,UAAU,GAAG,KAAK;MACzB,CAAC,CACF;;EAEP;;AAnCWvB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAA4B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX/BjC,8BAA6B;MAGtBA,gDAAgC;MAAAA,iBAClC;MAEDA,wCAAkB;MACcA;QAAA,OAAYkC,YAAQ;MAAA,EAAC;MACjDlC,yBAAG;MAEYA,wBAAQ;MAAAA,iBAAY;MAC/BA,4BAAoE;MACpEA,iFAEY;MACdA,iBAAiB;MAGnBA,0BAAG;MAEYA,yBAAQ;MAAAA,iBAAY;MAC/BA,4BAKE;MACFA,iFAEY;MACdA,iBAAiB;MAGnBA,iFAAgE;MAEhEA,+BAAmC;MACSA,uBAAM;MAAAA,iBAAS;;;MAnCvDA,eAA2D;MAA3DA,yCAA2D;MAM3DA,eAAuB;MAAvBA,yCAAuB;MAKXA,eAA2C;MAA3CA,gEAA2C;MAe3CA,eAA2C;MAA3CA,gEAA2C;MAM/CA,eAAiB;MAAjBA,sCAAiB","names":["Validators","i0","LoginPageComponent","constructor","loginClient","fb","auth","router","control","error","loginForm","controls","hasError","group","username","required","maxLength","password","minLength","submit","valid","login","value","subscribe","result","loginValid","setUser","navigate","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\princz\\source\\repos\\Angular\\Angular\\ClientApp\\src\\app\\modules\\login\\login-page\\login-page.component.ts","C:\\Users\\princz\\source\\repos\\Angular\\Angular\\ClientApp\\src\\app\\modules\\login\\login-page\\login-page.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LoginClient } from 'src/app/api/app.generated';\nimport { AuthService } from 'src/app/shared/services/auth.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css'],\n})\nexport class LoginPageComponent {\n  loginForm!: FormGroup;\n  loginValid: boolean = true;\n\n  constructor(\n    private readonly loginClient: LoginClient,\n    private readonly fb: FormBuilder,\n    private readonly auth: AuthService,\n    private readonly router: Router\n  ) {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required, Validators.maxLength(100)]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n    });\n  }\n\n  submit() {\n    if (this.loginForm.valid) {\n      this.loginClient\n        .login({\n          username: this.loginForm.controls['username'].value,\n          password: this.loginForm.controls['password'].value,\n        })\n        .subscribe(\n          (result) => {\n            this.loginValid = true;\n            this.auth.setUser(result);\n            this.router.navigate(['employees']);\n          },\n          (error) => {\n            console.log(error);\n            this.loginValid = false;\n          }\n        );\n    }\n  }\n\n  public errorHandling = (control: string, error: string) => {\n    return this.loginForm.controls[control].hasError(error);\n  };\n}\n","<div class=\"login-form-flex\">\n  <mat-card [style]=\"{ 'min-width': '500px', 'align-items': 'center' }\">\n    <mat-card-title class=\"pt-1 pb-3\"\n      >Enter your username and password</mat-card-title\n    >\n\n    <mat-card-content>\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"submit()\">\n        <p>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Username</mat-label>\n            <input matInput placeholder=\"Username\" formControlName=\"username\" />\n            <mat-error *ngIf=\"errorHandling('username', 'required')\">\n              Username is required\n            </mat-error>\n          </mat-form-field>\n        </p>\n\n        <p>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Password</mat-label>\n            <input\n              type=\"password\"\n              matInput\n              placeholder=\"Password\"\n              formControlName=\"password\"\n            />\n            <mat-error *ngIf=\"errorHandling('password', 'required')\">\n              Password is required\n            </mat-error>\n          </mat-form-field>\n        </p>\n\n        <mat-error *ngIf=\"!loginValid\"> Invalid credentials </mat-error>\n\n        <div class=\"button-flex-container\">\n          <button color=\"primary\" mat-raised-button>Submit</button>\n        </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}