{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginPageComponent = class LoginPageComponent {\n  constructor(loginClient, fb, auth, router) {\n    this.loginClient = loginClient;\n    this.fb = fb;\n    this.auth = auth;\n    this.router = router;\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required, Validators.maxLength(100)]],\n      password: ['', [Validators.required, Validators.minLength(8)]]\n    });\n  }\n  submit() {\n    if (this.loginForm.valid) {\n      this.loginClient.login({\n        username: this.loginForm.controls['username'].value,\n        password: this.loginForm.controls['password'].value\n      }).subscribe(result => {\n        this.error = undefined;\n        this.auth.setUser(result);\n        this.router.navigate(['employees']);\n      }, error => {\n        this.error = 'Invalid credentials';\n      });\n    }\n  }\n};\nLoginPageComponent = __decorate([Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})], LoginPageComponent);\nexport { LoginPageComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAI7BC,YACmBC,WAAwB,EACxBC,EAAe,EACfC,IAAiB,EACjBC,MAAc;IAHd,gBAAW,GAAXH,WAAW;IACX,OAAE,GAAFC,EAAE;IACF,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;IAEvB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACW,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MAChEC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEAC,MAAM;IACJ,IAAI,IAAI,CAACP,SAAS,CAACQ,KAAK,EAAE;MACxB,IAAI,CAACZ,WAAW,CACba,KAAK,CAAC;QACLP,QAAQ,EAAE,IAAI,CAACF,SAAS,CAACU,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK;QACnDN,QAAQ,EAAE,IAAI,CAACL,SAAS,CAACU,QAAQ,CAAC,UAAU,CAAC,CAACC;OAC/C,CAAC,CACDC,SAAS,CACPC,MAAM,IAAI;QACT,IAAI,CAACC,KAAK,GAAGC,SAAS;QACtB,IAAI,CAACjB,IAAI,CAACkB,OAAO,CAACH,MAAM,CAAC;QACzB,IAAI,CAACd,MAAM,CAACkB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;MACrC,CAAC,EACAH,KAAK,IAAI;QACR,IAAI,CAACA,KAAK,GAAG,qBAAqB;MACpC,CAAC,CACF;;EAEP;CACD;AAnCYpB,kBAAkB,eAL9BF,SAAS,CAAC;EACT0B,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACW1B,kBAAkB,CAmC9B;SAnCYA,kBAAkB","names":["Component","Validators","LoginPageComponent","constructor","loginClient","fb","auth","router","loginForm","group","username","required","maxLength","password","minLength","submit","valid","login","controls","value","subscribe","result","error","undefined","setUser","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\princz\\source\\repos\\Angular\\Angular\\ClientApp\\src\\app\\modules\\login\\login-page\\login-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LoginClient } from 'src/app/api/app.generated';\nimport { AuthService } from 'src/app/shared/services/auth.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css'],\n})\nexport class LoginPageComponent {\n  loginForm!: FormGroup;\n  error: string | undefined;\n\n  constructor(\n    private readonly loginClient: LoginClient,\n    private readonly fb: FormBuilder,\n    private readonly auth: AuthService,\n    private readonly router: Router\n  ) {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required, Validators.maxLength(100)]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n    });\n  }\n\n  submit() {\n    if (this.loginForm.valid) {\n      this.loginClient\n        .login({\n          username: this.loginForm.controls['username'].value,\n          password: this.loginForm.controls['password'].value,\n        })\n        .subscribe(\n          (result) => {\n            this.error = undefined;\n            this.auth.setUser(result);\n            this.router.navigate(['employees']);\n          },\n          (error) => {\n            this.error = 'Invalid credentials';\n          }\n        );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}