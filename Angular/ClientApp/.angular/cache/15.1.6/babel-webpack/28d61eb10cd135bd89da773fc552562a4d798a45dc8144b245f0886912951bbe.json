{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { combineLatest } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/api/app.generated\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/forms\";\nexport class EmployeeEditComponent {\n  constructor(employeeClient, departmentClient, dialogRef, data, fb) {\n    this.employeeClient = employeeClient;\n    this.departmentClient = departmentClient;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.fb = fb;\n    this.bossSelectOptions = [];\n    this.departmentSelectOptions = [];\n    this.hide = true;\n    this.dataLoaded = false;\n    this.errorHandling = (control, error) => {\n      return this.editEmployeeForm.controls[control].hasError(error);\n    };\n    this.initForm();\n  }\n  ngOnInit() {\n    combineLatest([this.employeeClient.employeeAll(), this.departmentClient.departmentAll()]).subscribe(result => {\n      this.dataLoaded = true;\n      this.bossSelectOptions = result[0];\n      this.departmentSelectOptions = result[1];\n    });\n  }\n  initForm() {\n    this.editEmployeeForm = this.fb.group({\n      name: ['', [Validators.required, Validators.maxLength(100)]],\n      position: ['', [Validators.required, Validators.maxLength(100)]],\n      phone: ['', [Validators.required, Validators.maxLength(16)]],\n      bossId: [null],\n      departmentId: [null, [Validators.required]]\n    });\n  }\n  cancel() {\n    this.dialogRef.close(false);\n  }\n  submitForm() {\n    this.employeeClient.employeePUT(1, {\n      name: this.editEmployeeForm.controls['name'].value,\n      position: this.editEmployeeForm.controls['position'].value,\n      phone: this.editEmployeeForm.controls['phone'].value,\n      bossId: this.editEmployeeForm.controls['bossId'].value,\n      departmentId: this.editEmployeeForm.controls['departmentId'].value\n    }).subscribe(() => {\n      this.dialogRef.close(true);\n    });\n  }\n}\nEmployeeEditComponent.ɵfac = function EmployeeEditComponent_Factory(t) {\n  return new (t || EmployeeEditComponent)(i0.ɵɵdirectiveInject(i1.EmployeeClient), i0.ɵɵdirectiveInject(i1.DepartmentClient), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nEmployeeEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EmployeeEditComponent,\n  selectors: [[\"app-employee-edit\"]],\n  decls: 2,\n  vars: 0,\n  template: function EmployeeEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"employee-edit works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","MAT_DIALOG_DATA","combineLatest","EmployeeEditComponent","constructor","employeeClient","departmentClient","dialogRef","data","fb","control","error","editEmployeeForm","controls","hasError","initForm","ngOnInit","employeeAll","departmentAll","subscribe","result","dataLoaded","bossSelectOptions","departmentSelectOptions","group","name","required","maxLength","position","phone","bossId","departmentId","cancel","close","submitForm","employeePUT","value","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\princz\\source\\repos\\Angular\\Angular\\ClientApp\\src\\app\\modules\\employee\\employee-edit\\employee-edit.component.ts","C:\\Users\\princz\\source\\repos\\Angular\\Angular\\ClientApp\\src\\app\\modules\\employee\\employee-edit\\employee-edit.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { combineLatest } from 'rxjs';\nimport {\n  EmployeeListDto,\n  DepartmentDto,\n  EmployeeClient,\n  DepartmentClient,\n  EmployeeUpdateDto,\n} from 'src/app/api/app.generated';\nimport { EmployeeAddComponent } from '../employee-add/employee-add.component';\n\n@Component({\n  selector: 'app-employee-edit',\n  templateUrl: './employee-edit.component.html',\n  styleUrls: ['./employee-edit.component.css'],\n})\nexport class EmployeeEditComponent {\n  editEmployeeForm!: FormGroup;\n\n  bossSelectOptions: EmployeeListDto[] = [];\n  departmentSelectOptions: DepartmentDto[] = [];\n  hide = true;\n  dataLoaded = false;\n\n  constructor(\n    private readonly employeeClient: EmployeeClient,\n    private readonly departmentClient: DepartmentClient,\n    private readonly dialogRef: MatDialogRef<EmployeeAddComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private readonly fb: FormBuilder\n  ) {\n    this.initForm();\n  }\n\n  ngOnInit(): void {\n    combineLatest([\n      this.employeeClient.employeeAll(),\n      this.departmentClient.departmentAll(),\n    ]).subscribe((result) => {\n      this.dataLoaded = true;\n      this.bossSelectOptions = result[0];\n      this.departmentSelectOptions = result[1];\n    });\n  }\n\n  initForm() {\n    this.editEmployeeForm = this.fb.group({\n      name: ['', [Validators.required, Validators.maxLength(100)]],\n      position: ['', [Validators.required, Validators.maxLength(100)]],\n      phone: ['', [Validators.required, Validators.maxLength(16)]],\n      bossId: [null],\n      departmentId: [null, [Validators.required]],\n    });\n  }\n\n  cancel() {\n    this.dialogRef.close(false);\n  }\n\n  submitForm() {\n    this.employeeClient\n      .employeePUT(1, {\n        name: this.editEmployeeForm.controls['name'].value,\n        position: this.editEmployeeForm.controls['position'].value,\n        phone: this.editEmployeeForm.controls['phone'].value,\n        bossId: this.editEmployeeForm.controls['bossId'].value,\n        departmentId: this.editEmployeeForm.controls['departmentId'].value,\n      } as EmployeeUpdateDto)\n      .subscribe(() => {\n        this.dialogRef.close(true);\n      });\n  }\n\n  public errorHandling = (control: string, error: string) => {\n    return this.editEmployeeForm.controls[control].hasError(error);\n  };\n}\n","<p>employee-edit works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}